---
title: "nycflights13 lab week 4 team 7"
author: "Chan Jit Lin, Firdauz B K, Celeste Tan, Lin Xiang Hong, Jonathan Chua"
date: "2024-05-28"
format:
  html:
    toc: true
    highlight: zenburn
    theme: spacelab
    embed-resources: true
  
---
```{r}
#| label: setup
#| include: false
library(DBI)

# database is called "nycflights13" in reality
con_nycflights13 <- DBI::dbConnect(odbc::odbc(), dsn = "nycflights13")
```
## Task 1
### 1.1 Github  repo named [nycflights13](https://github.com/firdauz-bk/nycflights13)

### 1.2 Insert Screenshot
![screenshot](images/ss_q1p1.jpg)

### 1.3 flights db connected

### 1.4 SQL Code:

```{sql, eval = FALSE}
-- Import table for planes
DROP TABLE IF EXISTS planes CASCADE;
CREATE TABLE planes (
    tailnum VARCHAR(255) PRIMARY KEY,
    year INT,
    type VARCHAR(255),
    manufacturer VARCHAR(255),
    model VARCHAR(255),
    engines INT,
    seats INT,
    speed INT,
    engine VARCHAR(255)
);

COPY planes
FROM 'C:\Users\Chanj\OneDrive - Singapore Institute Of Technology\Areas\T3Y1\AAI1001 Data engineering and visualisation\week 4\nycflights13\data\planes.csv'
CSV HEADER;
```

## Task 2: Aggregating Information from the flights Table

### 2.1 
What are the rankings of New York City’s main airports in terms of the total number of destinations served? Include columns for the following attributes:

Three-letter airport code

Airport name

Number of destinations

Rank
```{sql}
#| connection: con_nycflights13

WITH nyc_airports AS (
    SELECT DISTINCT origin
    FROM flights
    WHERE origin IN ('JFK', 'LGA', 'EWR')
),
dest_count AS (
    SELECT
        f.origin AS airport_code,
        a.name AS airport_name,
        COUNT(DISTINCT f.dest) AS num_destinations
    FROM flights f
    INNER JOIN airports a ON f.origin = a.faa
    WHERE f.origin IN (SELECT origin FROM nyc_airports)
    GROUP BY f.origin, a.name
),
ranked_airports AS (
    SELECT
        airport_code,
        airport_name,
        num_destinations,
        RANK() OVER (ORDER BY num_destinations DESC, airport_code ASC) AS rank
    FROM dest_count
)
SELECT
    airport_code,
    airport_name,
    num_destinations,
    rank
FROM ranked_airports
ORDER BY rank, airport_code
LIMIT 4;
```
### 2.2
Which ten destination airports are served by the greatest number of seats from New York City? If airports are tied for the tenth place, ensure that all tied airports are included in the output. Include columns for the following attributes:

Three-letter airport code

Airport name

Number of seats

Rank
```{sql}
#| connection: con_nycflights13
#| include : true
WITH nyc_flights AS (
    SELECT
        f.dest AS airport_code,
        SUM(p.seats) AS total_seats
    FROM flights f
    INNER JOIN planes p ON f.tailnum = p.tailnum
    WHERE f.origin IN ('JFK', 'LGA', 'EWR')
    GROUP BY f.dest
),
ranked_destinations AS (
    SELECT
        airport_code,
        total_seats,
        RANK() OVER (ORDER BY total_seats DESC, airport_code ASC) AS rank
    FROM nyc_flights
)
SELECT
    rd.airport_code,
    a.name AS airport_name,
    rd.total_seats,
    rd.rank
FROM ranked_destinations rd
INNER JOIN airports a ON rd.airport_code = a.faa
WHERE rd.rank <= 10
ORDER BY rd.rank, rd.airport_code
LIMIT 4;

```

### 2.3
What are the rankings of New York City’s main airports in terms of mean departure delay (highest delay first), weighting each flight equally when taking the average? Include columns for the following attributes:

Three-letter airport code

Airport name

Mean departure delay in minutes, rounded to two decimal places

Rank
```{sql}
#| connection: con_nycflights13
WITH nyc_airports AS (
    SELECT
        faa,
        name
    FROM
        Airports
    WHERE
        faa IN ('JFK', 'LGA', 'EWR')
),
mean_dep_delay AS (
    SELECT
        f.origin AS airport_code,
        a.name AS airport_name,
        ROUND(AVG(f.dep_delay), 2) AS mean_dep_delay
    FROM
        Flights f
    JOIN
        nyc_airports a
    ON
        f.origin = a.faa
    GROUP BY
        f.origin, a.name
)
SELECT
    airport_code,
    airport_name,
    mean_dep_delay,
    RANK() OVER (ORDER BY mean_dep_delay DESC) AS rank
FROM
    mean_dep_delay
ORDER BY
    rank,
    airport_code
    
LIMIT 4;


```

### 2.4
Tabulate the percentage of on-time departures for each hour of the day when the plane is scheduled to leave. Include columns for the following attributes:

Hour of the day

Percentage of on-time departures, rounded to two decimal places
```{sql}
#| connection: con_nycflights13
WITH departure_info AS (
    SELECT
        sched_dep_time / 100 AS hour_of_day,
        CASE
            WHEN dep_delay <= 0 THEN 1
            ELSE 0
        END AS on_time
    FROM
        Flights
)
, on_time_stats AS (
    SELECT
        hour_of_day,
        COUNT(*) AS total_flights,
        SUM(on_time) AS on_time_flights
    FROM
        departure_info
    GROUP BY
        hour_of_day
)
SELECT
    hour_of_day,
    ROUND((on_time_flights::numeric / total_flights) * 100, 2) AS percentage_on_time
FROM
    on_time_stats
ORDER BY
    hour_of_day
    
LIMIT 4;

```
### 2.5
Which planes, identified by their tail number, were operated by more than one airline? Include columns for the following attributes:

Tail number

Manufacturer

Model

Number of airlines (must be greater than 1)
```{sql}
#| connection: con_nycflights13
WITH plane_airline_count AS (
    SELECT
        tailnum,
        COUNT(DISTINCT carrier) AS num_airlines
    FROM
        Flights
    GROUP BY
        tailnum
    HAVING
        COUNT(DISTINCT carrier) > 1
)
SELECT
    p.tailnum,
    p.manufacturer,
    p.model,
    pac.num_airlines
FROM
    plane_airline_count pac
JOIN
    Planes p
ON
    pac.tailnum = p.tailnum
ORDER BY
    p.tailnum
LIMIT 10;

```


## Task 3: 

### 3.1

### 3.2

### 3.3

### 3.4

## Task 4: 

### 4.1
```{sql}
#| connection: con_nycflights13
SELECT COUNT(*)
FROM (
    SELECT DISTINCT f.origin, f.time_hour
    FROM flights f
    LEFT JOIN weather w ON f.origin = w.origin AND f.time_hour = w.time_hour
    WHERE w.origin IS NULL AND w.time_hour IS NULL
);
```
### 4.2
```{sql}
#| connection: con_nycflights13
WITH nyc_airports AS (
    SELECT 
        faa, 
        name
    FROM 
        airports
    WHERE 
        faa IN ('JFK', 'LGA', 'EWR')
),
flights_weather AS (
    SELECT 
        f.origin, 
        f.dep_delay,
        w.precip
    FROM 
        flights f
    JOIN 
        weather w 
    ON 
        f.origin = w.origin 
        AND f.year = w.year 
        AND f.month = w.month 
        AND f.day = w.day 
        AND f.hour = w.hour
)
SELECT 
    a.faa AS airport_code,
    a.name AS airport_name,
    CASE 
        WHEN fw.precip = 0 THEN TRUE 
        ELSE FALSE 
    END AS is_dry,
    ROUND(
        (SUM(CASE WHEN fw.dep_delay <= 0 THEN 1 ELSE 0 END)::numeric / COUNT(fw.dep_delay)) * 100, 
        2
    ) AS on_time_percentage
FROM 
    nyc_airports a
JOIN 
    flights_weather fw 
ON 
    a.faa = fw.origin
GROUP BY 
    a.faa, 
    a.name, 
    is_dry
ORDER BY 
    a.faa, 
    is_dry
LIMIT 10;

```

### 4.3
```{sql}
#| connection: con_nycflights13

WITH low_visibility_delay AS (
    SELECT 
        f.origin AS airport_code,
        a.name AS airport_name,
        AVG(f.dep_delay) AS mean_departure_delay
    FROM 
        flights f
    JOIN 
        weather w ON f.origin = w.origin AND f.time_hour = w.time_hour
    JOIN 
        airports a ON f.origin = a.faa
    WHERE 
        w.visib < 1 AND
        f.origin IN ('JFK', 'LGA', 'EWR')
    GROUP BY 
        f.origin, a.name
)
SELECT 
    airport_code,
    airport_name,
    ROUND(mean_departure_delay, 2) AS mean_departure_delay,
    RANK() OVER (ORDER BY mean_departure_delay) AS rank
FROM 
    low_visibility_delay
ORDER BY 
    rank, airport_code;
```

### 4.4

### 4.5
```{sql}
#| connection: con_nycflights13
WITH burlington_flights AS (
    SELECT
        f.origin,
        f.air_time,
        CASE
            WHEN w.wind_dir BETWEEN 135 AND 225 THEN 'South'
            WHEN w.wind_dir BETWEEN 0 AND 45 OR w.wind_dir BETWEEN 315 AND 360 THEN 'North'
            ELSE NULL
        END AS wind_direction
    FROM
        flights f
    JOIN
        weather w ON f.origin = w.origin
    WHERE
        f.dest = 'BTV'
)
SELECT
    wind_direction,
    AVG(air_time) AS mean_air_time
FROM
    burlington_flights
WHERE
    wind_direction IS NOT NULL
GROUP BY
    wind_direction
    
LIMIT 10;


```

## Task 5: Finalising the submission

### 5.1 Commit and push changes to github

### 5.2 As a team, capture a screenshot of the repository owner’s GitHub project Code page, displaying the URL bar, the nycflights13 data folder, screenshot images, and most importantly, the team_XX_nycflights13.qmd file and the rendered team_XX_nycflights13.html file. [screenshot]()

### 5.3 Submit zip file
The repository owner’s Manage access page of the GitHub repository, Subtask 1.1.

The Code tab in the GitHub repository showing one collaborator’s commit of adding the nycflights13 folder, Subtask 1.2.

The Code tab in the GitHub repository showing the final commit, when finalizing your work, Step 2 of this section.






